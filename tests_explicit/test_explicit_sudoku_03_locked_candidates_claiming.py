from tests_explicit.test_small_explicit import solve
from techniques.LockedCandidatesClaiming import LockedCandidatesClaiming


def test_locked_candidates_claiming_rows():
    actual = \
        f"""
        123_a 123_a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    expected = \
        f"""
        123_a 123_a   ____b ____b
        ____a ____a   123_b 123_b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, LockedCandidatesClaiming()):
        return
    assert False


def test_locked_candidates_claiming_cols():
    actual = \
        f"""
        123_a ____a   ____b ____b
        123_a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    expected = \
        f"""
        123_a ____a   ____b ____b
        123_a ____a   ____b ____b

        ____c 123_c   ____d ____d
        ____c 123_c   ____d ____d
        """
    if solve(4, actual, expected, LockedCandidatesClaiming()):
        return
    assert False


def test_sudoku_explicit_locked_candidates_claiming_2_fins_rows():
    actual = \
        f"""
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    
    12345678_g 12345678_g 12345678_g    12345678_h 12345678_h 12345678_h    12345678_i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
    """
    expected = \
        f"""
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    
    12345678_g 12345678_g 12345678_g    12345678_h 12345678_h 12345678_h    12345678_i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    12345678_i 12345678_i 12345678_i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    12345678_i 12345678_i 12345678_i
    """
    if solve(9, actual, expected, LockedCandidatesClaiming()):
        return
    assert False


def test_sudoku_explicit_locked_candidates_claiming_3_fins_cols():
    actual = \
        f"""
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    """
    expected = \
        f"""
    123456789a 123456789a 123456789a    12_456789b 123456789b 12_456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    12_456789b 123456789b 12_456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    12_456789b 123456789b 12_456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 12_456789e 123456789e    123456789f 123456789f 123456789f
    
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 12_456789h 123456789h    123456789i 123456789i 123456789i
    """
    if solve(9, actual, expected, LockedCandidatesClaiming()):
        return
    assert False


def test_sudoku_explicit_locked_candidates_claiming_3_fins_rows():
    actual = \
        f"""
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    
    12345678_g 12345678_g 12345678_g    12345678_h 12345678_h 12345678_h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
    """
    expected = \
        f"""
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
    
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
    
    12345678_g 12345678_g 12345678_g    12345678_h 12345678_h 12345678_h    123456789i 123456789i 123456789i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    12345678_i 12345678_i 12345678_i
    123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    12345678_i 12345678_i 12345678_i
    """
    if solve(9, actual, expected, LockedCandidatesClaiming()):
        return
    assert False
