import pytest

from techniques import *
from tests_explicit.test_small_explicit import solve


# @pytest.mark.skip("EXPLICITLY")
# def test_finned_x_wing_east():
#     actual = \
#         f"""
#         _234a ____a   234_b ____b
#         ____a ____a   ____b ____b
#
#         _234c ____c   ____d ____d
#         ____c ____c   ____d ____d
#         """
#
#     expected = \
#         f"""
#         _234a ____a   234_b ____b
#         ____a ____a   ____b ____b
#
#         _234c ____c   ____d ____d
#         ____c ____c   ____d _234d
#         """
#     if solve(4, actual, expected, FinnedXWing()):
#         return
#     assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_ne_rows():
    actual = \
        f"""
        123_a ____a   123_b 123_b
        ____a ____a   ____b ____b

        123_c ____c   123_d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_nw_rows():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_se_rows():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_sw_rows():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_ne_cols():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_nw_cols():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_se_cols():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_finned_x_wing_sw_cols():
    actual = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """

    expected = \
        f"""
        ____a ____a   ____b ____b
        ____a ____a   ____b ____b

        ____c ____c   ____d ____d
        ____c ____c   ____d ____d
        """
    if solve(4, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_sudoku_explicit_finned_x_wing_1_fin_cols():
    actual = \
        f"""
        _________a _________a __3______a    _________b _______8_b _________b    _________c _________c _________c
        _________a _________a _____6___a    _________b 1________b _________b    _________c _________c _________c
        _________a _________a ____5___9a    _________b ______7_9b _________b    _________c _________c _________c
        
        _________d _________d 1________d    _________e ____5____e _________e    _________f _________f _________f
        _________d _________d ___4_____d    _________e __3__67__e _________e    _________f _________f _________f
        _________d _________d ______7__d    _________e _2_______e _________e    _________f _________f _________f
        
        _________g _________g _______8_g    _2_______h __3__67__h ____5____h    _________i _________i _________i
        _________g _________g ____5___9g    __3___7_9h __34_67_9h __3__678_h    _________i _________i _________i
        _________g _________g _2_______g    1________h __34____9h __3____8_h    _________i _________i _________i
        """

    expected = \
        f"""
        _________a _________a __3______a    _________b _______8_b _________b    _________c _________c _________c
        _________a _________a _____6___a    _________b 1________b _________b    _________c _________c _________c
        _________a _________a ____5___9a    _________b ______7_9b _________b    _________c _________c _________c
        
        _________d _________d 1________d    _________e ____5____e _________e    _________f _________f _________f
        _________d _________d ___4_____d    _________e __3__67__e _________e    _________f _________f _________f
        _________d _________d ______7__d    _________e _2_______e _________e    _________f _________f _________f
        
        _________g _________g _______8_g    _2_______h __3__67__h ____5____h    _________i _________i _________i
        _________g _________g ____5___9g    __3___7__h __34_67_9h __3__678_h    _________i _________i _________i
        _________g _________g _2_______g    1________h __34____9h __3____8_h    _________i _________i _________i
        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_sudoku_explicit_finned_x_wing_1_fin_rows():
    actual = \
        f"""
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        
        _________d _________d _________d    12____7__e _________e _________e    _________f _________f _________f
        ___4_____d 1_______9d 1_______9d    _23__6___e _______8_e _23__6___e    _23_5____f _2__5____f ______7__f
        _________d _________d _________d    __3___7__e _________e _________e    _________f _________f _________f
        
        _2_______g 1______8_g _____6___g    1_3______h ______7__h ___4_____h    __3_5__8_i 1___5__8_i ________9i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        """

    expected = \
        f"""
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        
        _________d _________d _________d    12____7__e _________e _________e    _________f _________f _________f
        ___4_____d 1_______9d 1_______9d    _23__6___e _______8_e _23__6___e    _23_5____f _2__5____f ______7__f
        _________d _________d _________d    ______7__e _________e _________e    _________f _________f _________f
        
        _2_______g 1______8_g _____6___g    1_3______h ______7__h ___4_____h    __3_5__8_i 1___5__8_i ________9i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_sudoku_explicit_finned_x_wing_2_fin_cols():
    actual = \
        f"""
        _________a _23456789a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _23456789a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _23456789g _________g    _23456789h _________h _________h    _________i _________i _________i
        _________g _23456789g _________g    _23456789h _________h _________h    _________i _________i _________i
        """

    expected = \
        f"""
        _________a _23456789a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _23456789a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _23456789b _23456789b    _________c _________c _________c
        
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        _________d _23456789d _________d    _23456789e _________e _________e    _________f _________f _________f
        
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _23456789g _________g    _23456789h _________h _________h    _________i _________i _________i
        _________g _23456789g _________g    _23456789h _________h _________h    _________i _________i _________i
        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False


@pytest.mark.skip("EXPLICITLY")
def test_sudoku_explicit_finned_x_wing_2_fin_rows():
    actual = \
        f"""
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _23456789b _23456789b _23456789b    _________c _23456789c _23456789c
        
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        
        _23456789g _23456789g _________g    _23456789h _23456789h _23456789h    _________i _23456789i _23456789i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        """

    expected = \
        f"""
        _________a _________a _23456789a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _23456789a    _________b _________b _________b    _________c _________c _________c
        _________a _________a _________a    _23456789b _23456789b _23456789b    _________c _23456789c _23456789c
        
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        _________d _________d _________d    _________e _________e _________e    _________f _________f _________f
        
        _23456789g _23456789g _________g    _23456789h _23456789h _23456789h    _________i _23456789i _23456789i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        _________g _________g _________g    _________h _________h _________h    _________i _________i _________i
        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False
