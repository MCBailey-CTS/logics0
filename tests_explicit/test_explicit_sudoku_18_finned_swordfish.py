from techniques.FinnedXWing import FinnedXWing
from tests_explicit.test_small_explicit import solve

import pytest
@pytest.mark.skip("EXPLICITLY")
def test_():
    actual = \
        f"""

        """

    expected = \
        f"""

        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False

# sudoku_explicit_finned_sword_fish_cols_actual
# 1234567_9a 123456789a 123456789a    123456789b _______89b 123456789b    123456789c 123456789c 1234567_9c
# 1234567_9a 123456789a 123456789a    123456789b __3____89b 123456789b    123456789c 123456789c ____5_78_c
# 1234567_9a 123456789a 123456789a    123456789b 1234567_9b 123456789b    123456789c 123456789c 1234567_9c
#
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
#
# 1_____78_g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 1234567_9i
# _2_4__78_g 123456789g 123456789g    123456789h 1234567_9h 123456789h    123456789i 123456789i ______78_i
# 1234567_9g 123456789g 123456789g    123456789h 1234567_9h 123456789h    123456789i 123456789i 1234567_9i
#
#
# sudoku_explicit_finned_sword_fish_cols_expected
# 1234567_9a 123456789a 123456789a    123456789b _______89b 123456789b    123456789c 123456789c 1234567_9c
# 1234567_9a 123456789a 123456789a    1234567_9b __3____89b 1234567_9b    123456789c 123456789c ____5_78_c
# 1234567_9a 123456789a 123456789a    123456789b 1234567_9b 123456789b    123456789c 123456789c 1234567_9c
#
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
# 1234567_9d 123456789d 123456789d    123456789e 1234567_9e 123456789e    123456789f 123456789f 1234567_9f
#
# 1_____78_g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 1234567_9i
# _2_4__78_g 123456789g 123456789g    123456789h 1234567_9h 123456789h    123456789i 123456789i ______78_i
# 1234567_9g 123456789g 123456789g    123456789h 1234567_9h 123456789h    123456789i 123456789i 1234567_9i
#
@pytest.mark.skip("EXPLICITLY")
def test_():
    actual = \
        f"""

        """

    expected = \
        f"""

        """
    if solve(9, actual, expected, FinnedXWing()):
        return
    assert False
# sudoku_explicit_finned_sword_fish_rows_actual
# 123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
# 123456789a 123456789a 123456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
# 123456789a 123456789a 123456789a    _23456789b 123456789b _23456789b    123456789c _23456789c _23456789c
#
# 123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
# _23456789d _23456789d 123456789d    _23456789e 123456789e _23456789e    123456789f _23456789f _23456789f
# 123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
#
# _23456789g _23456789g 123456789g    _23456789h 123456789h _23456789h    123456789i _23456789i _23456789i
# 123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
# 123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
#
#
# sudoku_explicit_finned_sword_fish_rows_expected
# 123456789a 123456789a _23456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
# 123456789a 123456789a _23456789a    123456789b 123456789b 123456789b    123456789c 123456789c 123456789c
# 123456789a 123456789a 123456789a    _23456789b 123456789b _23456789b    123456789c _23456789c _23456789c
#
# 123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
# _23456789d _23456789d 123456789d    _23456789e 123456789e _23456789e    123456789f _23456789f _23456789f
# 123456789d 123456789d 123456789d    123456789e 123456789e 123456789e    123456789f 123456789f 123456789f
#
# _23456789g _23456789g 123456789g    _23456789h 123456789h _23456789h    123456789i _23456789i _23456789i
# 123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
# 123456789g 123456789g 123456789g    123456789h 123456789h 123456789h    123456789i 123456789i 123456789i
#
#
#
