import pytest

from Puzzle import Mathrax
from _defaults import default_test_puzzle
from solving import Solving


# from techniques.LockedCandidatesClaiming import LockedCandidatesClaiming
# from techniques.LockedCandidatesPointing import LockedCandidatesPointing

EXPLICITLY = "EXPLICITLY"

# @pytest.mark.parametrize("constructor, technique, actual, expected", [



#     (Mathrax,
#      CrossHatch(),
#      Constants.mathrax_cross_hatch_actual.__name__,
#      Constants.mathrax_cross_hatch_expected.__name__),
#     (Mathrax,
#      tech.MathraxMathSubtraction(),
#      Constants.mathrax_01minus_actual.__name__,
#      Constants.mathrax_01minus_expected.__name__),
#     (Mathrax,
#      tech.MathraxMath04XWing(),
#      Constants.mathrax_04plus_actual.__name__,
#      Constants.mathrax_04plus_expected.__name__),
#     (Mathrax,
#      tech.MathraxMathMultiplication(),
#      Constants.mathrax_06x04x_actual.__name__,
#      Constants.mathrax_06x04x_expected.__name__),
# ])
# def test_default_actual_expected(constructor, technique, actual, expected):
#     if "\n" in actual or "\n" in expected:
#         pytest.skip('Explicitly')
#     assert default_test_explicit_actual_expected(constructor, technique, getattr(Constants, actual)(),
#                                                  getattr(Constants, expected)())
# @staticmethod
# def mathrax_explicit_cross_hatch_actual():
#     return f"""
#     mathrax_explicit_cross_hatch_actual.mathrax
#     4
#     __3_ ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 1234 ... 1234
#     """
#
# @staticmethod
# def mathrax_explicit_cross_hatch_expected():
#     return f"""
#     mathrax_explicit_cross_hatch_expected.mathrax
#     4
#     __3_ ... 12_4 ... 12_4 ... 12_4
#     .... ... .... ... .... ... ....
#     12_4 ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     12_4 ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     12_4 ... 1234 ... 1234 ... 1234
#     """
#
# @staticmethod
# def mathrax_explicit_hidden_single_actual():
#     return f"""
#     mathrax_explicit_hidden_single_actual.mathrax
#     4
#     123_ ... 123_ ... 123_ ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 123_ ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 123_ ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 1234 ... 1234
#     """
#
# @staticmethod
# def mathrax_explicit_hidden_single_expected():
#     return f"""
#     mathrax_explicit_hidden_single_expected.mathrax
#     4
#     123_ ... 123_ ... 123_ ... ___4
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 123_ ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... 123_ ... 1234
#     .... ... .... ... .... ... ....
#     1234 ... 1234 ... ___4 ... 1234
#     """



# @staticmethod
# def mathrax_cross_hatch_actual():
#     return f"""
#     mathrax_cross_hatch_actual.mathrax
#     4
#     1___ ... 1234 ... ___4 ... __3_
#     .... 04+ .... 01- .... ... ....
#     _2__ ... 1234 ... 1234 ... 1234
#     .... 01- .... ... .... 01- ....
#     ___4 ... 1234 ... 1234 ... 1234
#     .... ... .... 01- .... ... ....
#     __3_ ... 1234 ... 1234 ... 1234
#     """

# @staticmethod
# def mathrax_cross_hatch_expected():
#     return f"""
#     mathrax_cross_hatch_expected.mathrax
#     4
#     1___ ... _2__ ... ___4 ... __3_
#     .... 04+ .... 01- .... ... ....
#     _2__ ... 1_34 ... 1_3_ ... 1__4
#     .... 01- .... ... .... 01- ....
#     ___4 ... 1_3_ ... 123_ ... 12__
#     .... ... .... 01- .... ... ....
#     __3_ ... 1__4 ... 12__ ... 12_4
#     """


# @staticmethod
# def mathrax_04plus_actual():
#     return f"""
#     mathrax_04plus_actual.mathrax
#     4
#     1___ ... 1234 ... ___4 ... __3_
#     .... 04+ .... ... .... ... ....
#     _2__ ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     ___4 ... 1234 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     __3_ ... 1234 ... 1234 ... 1234
#     """

# @staticmethod
# def mathrax_04plus_expected():
#     return f"""
#     mathrax_04plus_expected.mathrax
#     4
#     1___ ... 1234 ... ___4 ... __3_
#     .... 04+ .... ... .... ... ....
#     _2__ ... 1234 ... 1_34 ... 1_34
#     .... ... .... ... .... ... ....
#     ___4 ... 1_34 ... 1234 ... 1234
#     .... ... .... ... .... ... ....
#     __3_ ... 1_34 ... 1234 ... 1234
#     """

# @staticmethod
# def mathrax_01minus_actual():
#     return f"""
#     mathrax_01minus_actual.mathrax
#     4
#     1___ ... _2__ ... ___4 ... __3_
#     .... ... .... 01- .... ... ....
#     _2__ ... 1_34 ... 1_3_ ... 1__4
#     .... 01- .... ... .... 01- ....
#     ___4 ... 1_3_ ... 123_ ... 12__
#     .... ... .... 01- .... ... ....
#     __3_ ... 1__4 ... 12__ ... 12_4
#     """

# @staticmethod
# def mathrax_01minus_expected():
#     return f"""
#     mathrax_01minus_expected.mathrax
#     4
#     1___ ... _2__ ... ___4 ... __3_
#     .... ... .... 01- .... ... ....
#     _2__ ... __3_ ... 1_3_ ... 1__4
#     .... 01- .... ... .... 01- ....
#     ___4 ... 1_3_ ... _23_ ... _2__
#     .... ... .... 01- .... ... ....
#     __3_ ... 1__4 ... _2__ ... 12_4
#     """

# @staticmethod
# def mathrax_02division_actual():
#     return f"""
#     mathrax_02division_actual.mathrax
#     6
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... 03- ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... 02/ ...... 07+ ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 04x ...... 08+ ...... 03- ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 06x ...... ... ...... 08+ ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     """

# @staticmethod
# def mathrax_02division_expected():
#     return f"""
#         mathrax_02division_expected.mathrax
#         6
#         123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#         ...... ... ...... ... ...... 03- ...... ... ...... ... ......
#         123456 ... 123456 ... 123456 ... 1234_6 ... 1234_6 ... 123456
#         ...... ... ...... ... ...... ... ...... 02/ ...... 07+ ......
#         123456 ... 123456 ... 123456 ... 1234_6 ... 1234_6 ... 123456
#         ...... ... ...... ... ...... ... ...... ... ...... ... ......
#         123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#         ...... 04x ...... 08+ ...... 03- ...... ... ...... ... ......
#         123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#         ...... 06x ...... ... ...... 08+ ...... ... ...... ... ......
#         123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#         """

# @staticmethod
# def mathrax_06x04x_actual():
#     return f"""
#     mathrax_06x04x_actual.mathrax
#     6
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... 03- ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... 02/ ...... 07+ ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 04x ...... 08+ ...... 03- ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 06x ...... ... ...... 08+ ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     """

# @staticmethod
# def mathrax_06x04x_expected():
#     return f"""
#     mathrax_06x04x_expected.mathrax
#     6
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... 03- ...... ... ...... ... ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... 02/ ...... 07+ ......
#     123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
#     ...... ... ...... ... ...... ... ...... ... ...... ... ......
#     12_4__ ... 12_4__ ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 04x ...... 08+ ...... 03- ...... ... ...... ... ......
#     12____ ... 12____ ... 123456 ... 123456 ... 123456 ... 123456
#     ...... 06x ...... ... ...... 08+ ...... ... ...... ... ......
#     __3__6 ... __3__6 ... 123456 ... 123456 ... 123456 ... 123456
#     """


EXPLICITLY = "EXPLICITLY"


def test_mathrax_001():
    puzzle_string = f"""
    001.mathrax
    4
    1___ ... 1234 ... ___4 ... __3_
    .... 04+ .... 01- .... ... ....
    _2__ ... 1234 ... 1234 ... 1234
    .... 01- .... ... .... 01- ....
    ___4 ... 1234 ... 1234 ... 1234
    .... ... .... 01- .... ... ....
    __3_ ... 1234 ... 1234 ... 1234
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_002():
    puzzle_string = f"""
    002.mathrax
    4
    1234 ... 1234 ... 1234 ... 1___
    .... 04x .... ... .... ... ....
    1234 ... 1234 ... 1234 ... 1234
    .... 02- .... 01- .... ... ....
    ___4 ... 1234 ... 1___ ... 1234
    .... ... .... ... .... 04x ....
    1234 ... 1___ ... 1234 ... ___4
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_003():
    puzzle_string = f"""
    003.mathrax
    4
    1234 ... 1___ ... 1234 ... 1234
    .... ... .... 01- .... ... ....
    1234 ... __3_ ... 1234 ... 1234
    .... ... .... 06+ .... 04+ ....
    1234 ... 1234 ... __3_ ... 1234
    .... 01- .... 05+ .... ... ....
    1234 ... 1234 ... 1234 ... 1234
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_004():
    puzzle_string = f"""
    004.mathrax
    4
    1234 ... 1234 ... 1234 ... 1234
    .... 04x .... 01- .... ... ....
    1234 ... 1234 ... 1234 ... 1234
    .... 02- .... 00- .... ... ....
    1234 ... 1234 ... 1234 ... 1234
    .... ... .... 01- .... ... ....
    1234 ... 1234 ... 1234 ... 1234
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_005():
    puzzle_string = f"""
        005.mathrax
        5
        __3__ ... _2___ ... 12345 ... 12345 ... 12345
        ..... ... ..... 05+ ..... 08+ ..... ... .....
        12345 ... 12345 ... 12345 ... ___4_ ... 12345
        ..... ... ..... ... ..... 02- ..... ... .....
        12345 ... 12345 ... 12345 ... 12345 ... 12345
        ..... ... ..... ... ..... ... ..... 01- .....
        12345 ... 12345 ... 12345 ... __3__ ... 12345
        ..... ... ..... ... ..... ... ..... ... .....
        1____ ... 12345 ... 12345 ... 12345 ... __3__
        """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_006():
    puzzle_string = f"""
    006.mathrax
    5
    12345 ... 12345 ... 12345 ... 12345 ... _2___
    ..... ... ..... ... ..... ... ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... 05+ ..... 01- ..... ... .....
    12345 ... 1____ ... 12345 ... 12345 ... 12345
    ..... 05+ ..... ... ..... ... ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... 01- ..... ... ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_007():
    puzzle_string = f"""
    007.mathrax
    5
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... ... ..... ... ..... 07+ .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... 04x ..... 02- ..... ... ..... OOO .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... ... ..... 07+ ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... ... ..... 01- ..... 02- .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_008():
    puzzle_string = f"""
    008.mathrax
    5
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... OOO ..... ... ..... 02- ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... 05+ ..... 01- ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... 02- ..... ... ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    ..... ... ..... 01- ..... ... ..... ... .....
    12345 ... 12345 ... 12345 ... 12345 ... 12345
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_009():
    puzzle_string = f"""
    009.mathrax
    6
    123456 ... ___4__ ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... ____5_ ... 123456 ... 123456
    ...... ... ...... 02- ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 02- ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 07+ ...... ... ...... 07+ ......
    1_____ ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 09+ ...... ... ......
    123456 ... 123456 ... _2____ ... 123456 ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_010():
    puzzle_string = f"""
    010.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 03- ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 02/ ...... 07+ ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 04x ...... 08+ ...... 03- ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 06x ...... ... ...... 08+ ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_011():
    puzzle_string = f"""
    011.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... _2____
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 04+ ...... 05+ ...... ... ......
    123456 ... _____6 ... 123456 ... _2____ ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... ___4__
    ...... ... ...... ... ...... ... ...... 02- ...... ... ......
    __3___ ... _2____ ... 123456 ... 123456 ... 123456 ... 123456
    ...... 02- ...... 04- ...... ... ...... 06+ ...... 03/ ......
    123456 ... 123456 ... 123456 ... ____5_ ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_012():
    puzzle_string = f"""
    012.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 01- ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... 04- ...... ... ...... 08+ ...... 03- ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 07+ ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 02- ...... 06+ ...... 03/ ...... ... ...... 03- ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 05+ ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_013():
    puzzle_string = f"""
    013.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 02- ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... 05+ ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    _____5 ... 123456 ... 1_____ ... 123456 ... _2____ ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    ____4_ ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 03/ ...... ... ......
    123456 ... 123456 ... 123456 ... 1_____ ... 123456 ... _____5
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_014():
    puzzle_string = f"""
    014.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 01- ...... 05+ ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 06+ ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... 06+ ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 01- ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... 07+ ...... 02/ ...... ... ...... ... ...... 01- ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_015():
    puzzle_string = f"""
    015.mathrax
    6
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... EEE ...... ... ...... ... ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... _____6 ... 123456 ... 123456
    ...... ... ...... 01- ...... ... ...... ... ...... 07+ ......
    ____5_ ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... ... ...... 01- ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    ...... ... ...... ... ...... 04- ...... ... ...... ... ......
    123456 ... 123456 ... 123456 ... 123456 ... 123456 ... 123456
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_016():
    puzzle_string = f"""
    016.mathrax
    7
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 08+ ....... ... ....... 01- ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 03- ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... 04+ ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 02- ....... ... ....... 04- ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 08+ ....... 06+ ....... 04+ ....... 04- ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 06+ ....... ... ....... ... ....... ... ....... 11+ ....... 01- .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


def test_mathrax_017():
    puzzle_string = f"""
    017.mathrax
    7
    1234567 ... 1234567 ... 1______ ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 01- ....... ... ....... ... ....... 01- .......
    1______ ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... ____5__ ... 1234567 ... 1234567 ... 1234567 ... __3____
    ....... ... ....... 03- ....... ... ....... 02/ ....... 12x ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... 01- ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... ______7 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... __3____ ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... ____5__
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_018():
    puzzle_string = f"""
    018.mathrax
    7
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... 06+ ....... 04+ .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... 03/ ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 03/ ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... OOO .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 06+ ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 04+ ....... 06+ ....... ... ....... ... ....... 01- ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_020():
    puzzle_string = f"""
    020.mathrax
    7
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 01- ....... 09+ ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... _2_____ ... 1234567
    ....... ... ....... 02- ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1______ ... 1234567
    ....... ... ....... ... ....... 01- ....... ... ....... OOO ....... ... .......
    _2_____ ... 1234567 ... 1234567 ... ____5__ ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... 04- ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    __3____ ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1______ ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... ____5__ ... 1234567
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())


@pytest.mark.skip("EXPLICITLY")
def test_mathrax_019():
    puzzle_string = f"""
    019.mathrax
    7
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... 01- .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... 05- ....... ... ....... ... ....... 02/ ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... 04+ ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... ... ....... ... ....... ... ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... 01- ....... ... ....... ... ....... ... ....... 08+ ....... ... .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    ....... ... ....... ... ....... 01- ....... ... ....... ... ....... 05+ .......
    1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567 ... 1234567
    """
    assert default_test_puzzle(puzzle_string, Mathrax, Solving.mathrax_techniques())
